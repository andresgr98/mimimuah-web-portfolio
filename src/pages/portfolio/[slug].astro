---
import Layout from '../../layouts/Layout.astro';
import { db } from '../../lib/db';
import { categories, categoryImages } from '../../lib/db/schema';
import { eq, asc } from 'drizzle-orm';

const { slug } = Astro.params;

// Get category
const category = await db.select().from(categories).where(eq(categories.slug, slug!)).get();

if (!category) {
  return Astro.redirect('/404');
}

// Redirect to /proyectos if it's the project category
if (category.isProjectCategory) {
  return Astro.redirect('/proyectos');
}

// Get images for this category
const images = await db
  .select()
  .from(categoryImages)
  .where(eq(categoryImages.categoryId, category.id))
  .orderBy(asc(categoryImages.order));
---

<Layout title={`${category.name} - Portfolio`}>
  <main class="pt-24 pb-16 px-4 sm:px-6 lg:px-8">
    <div class="max-w-7xl mx-auto">
      <!-- Category Header -->
      <div class="mb-12">
        <h1 class="text-4xl sm:text-5xl font-bold text-gray-900 mb-4">
          {category.name}
        </h1>
      </div>

      <!-- Masonry Grid -->
      {images.length > 0 ? (
        <div class="columns-3 gap-2 sm:gap-6" id="gallery">
          {images.map((image, index) => {
            // Cada 5ta foto es más alta
            const isTall = (index + 1) % 5 === 0;
            return (
              <a
                href={image.imagePath}
                target="_blank"
                rel="noreferrer"
                class="block mb-2 sm:mb-6 break-inside-avoid"
              >
                <div class:list={[
                  "overflow-hidden rounded-lg bg-gray-200",
                  isTall ? "aspect-[3/5]" : "aspect-[3/4]"
                ]}>
                  <img
                    src={image.imagePath}
                    alt={`${category.name} - Imagen ${image.order + 1}`}
                    class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                    loading="lazy"
                  />
                </div>
              </a>
            );
          })}
        </div>
      ) : (
        <div class="text-center py-20">
          <p class="text-gray-500 text-lg">
            Próximamente: imágenes de {category.name}
          </p>
        </div>
      )}
    </div>
  </main>
</Layout>

<script>
  import PhotoSwipeLightbox from 'photoswipe/lightbox';
  import 'photoswipe/style.css';

  const lightbox = new PhotoSwipeLightbox({
    gallery: '#gallery',
    children: 'a',
    pswpModule: () => import('photoswipe'),
  });

  // Obtener dimensiones reales ANTES de abrir el lightbox
  lightbox.addFilter('itemData', (itemData, index) => {
    const element = itemData.element;
    if (element) {
      const img = element.querySelector('img');
      if (img && img.naturalWidth) {
        itemData.w = img.naturalWidth;
        itemData.h = img.naturalHeight;
      }
    }
    return itemData;
  });

  lightbox.init();
</script>
